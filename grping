import pandas as pd
import numpy as np
def convert_to_percent(data):
    data = data/100
    return(data)
def get_shrinkages():
    warp_shrinkage = df.iloc[:198,10].unique()
    warp_shrinkage = warp_shrinkage[~pd.isnull(warp_shrinkage)]
    weft_shrinkage = df.iloc[:198,11].unique()
    weft_shrinkage = weft_shrinkage[~pd.isnull(weft_shrinkage)]
    # weft_shrinkage = weft_shrinkage[np.logical_not(np.isnan(weft_shrinkage))]
    return (warp_shrinkage,weft_shrinkage)

# def group_warp(meters_warp):
    
#     # get_shrinkages() not working global variable
#         for meters in range(len(meters_warp)):
#             center = warp_shrinkage[meters]
        
df = pd.read_excel('test.xlsx',header=16,usecols=11)
# meters_warp = df.groupby("Warp%")["Net length"].sum()
warp_shrinkage = df.iloc[:198,10].unique()# all unique shrikages
warp_shrinkage = warp_shrinkage[~pd.isnull(warp_shrinkage)]# remove nan from list
warp_shrinkage = np.sort(warp_shrinkage)
meters_warp = df.groupby(df.iloc[:198,10])["Net length"].sum()# sum if
count_warp = df.groupby(df.iloc[:198,10])["Net length"].count()# count if
total_meters = df.iloc[:198,5].sum()

print ( "total meters is ", total_meters)

tolerance = 1 # this will be a user input 
tolerance = tolerance/100 # convert % to number

percent_warp = []* len(meters_warp) # create a blank array for assignments later
# shrinkage = [[0 ]*10] *10
rows, cols = (10, 10) 
# method 2b 
shrinkage = [[0 for x in range(cols)] for y in range(rows)]

#iterate over every unique shrinkage 
for i in range(len(meters_warp)):
    center = warp_shrinkage[i]
    group = 1
    max =round(center + tolerance,3)  
    print("max=",max)
    min = round(center - tolerance,3)
    print("min=",min)
    for j in range(len(meters_warp)): 
        if warp_shrinkage[j] ==max  or warp_shrinkage[j] == min:
            print ("if",i,j)
            shrinkage[i][j] = group
        elif (warp_shrinkage[j] <max ) and (warp_shrinkage[j] > min):
            print ("elif",i,j)
            shrinkage[i][j] = group
        else:
            if j > 0:
                group = group + 1
            center = warp_shrinkage[j]
            max =round(center + tolerance,3)
            min = round(center - tolerance,3)
            shrinkage[i][j] = group

# print((meters_warp))
# print(count_warp.sum())
# print(group_warp(meters_warp))

print(meters_warp)
print(count_warp)
print(shrinkage)


#pass output into a dataframe
data = {'warp%':warp_shrinkage,'meters':meters_warp}
newdf = pd.DataFrame(data)
print(newdf)
